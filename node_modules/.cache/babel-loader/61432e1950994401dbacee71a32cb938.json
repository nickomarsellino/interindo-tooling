{"ast":null,"code":"var _jsxFileName = \"/Users/aleph/Documents/interindo-tooling/src/components/design-system/ImageCardList/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classname from 'classnames';\nimport FadeIn from 'react-fade-in';\nimport './styles.scss';\nimport LazyLoad from 'react-lazyload';\nimport { ImageCard, ImageModal } from '../../../components';\nimport { Button } from 'semantic-ui-react';\nimport { getDataFromAPI, getDetailProductImages } from \"../../../config/redux/action\";\nimport { connect } from \"react-redux\"; // data dummy\n\nimport productImg1 from '../../../assets/images/dummy/product-card-1.jpeg';\nimport productImg2 from '../../../assets/images/dummy/product-card-2.jpeg';\n\nclass ImageCardList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showPopup: false\n    };\n\n    this.handleShowPopup = status => {\n      this.setState({\n        showPopup: !status\n      });\n    };\n\n    this.handleClosePopup = status => {\n      this.setState({\n        showPopup: !status\n      });\n    };\n  }\n\n  componentDidMount() {\n    const user = \"user\";\n    this.props.getNotes(user);\n  }\n\n  render() {\n    const handleShowPopup = this.handleShowPopup,\n          handleClosePopup = this.handleClosePopup,\n          showPopup = this.state.showPopup,\n          _this$props = this.props,\n          className = _this$props.className,\n          data = _this$props.data,\n          notes = _this$props.notes,\n          moreImage = _this$props.moreImage;\n    const classNames = classname('ds-image-card-list', className);\n    return React.createElement(FadeIn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categoryMenu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, notes.length !== 0 ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, notes.map(bebas => {\n      return React.createElement(\"div\", {\n        className: \"gridContainer\",\n        key: bebas.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          cursor: \"pointer\",\n          backgroundColor: \"cyan\",\n          width: \"-webkit-max-content\"\n          /* Chrome */\n\n        },\n        onClick: () => {\n          this.getDetail(bebas);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, bebas.id)));\n    })) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Tidak ada Dataaa\")), React.createElement(ImageModal, {\n      showPopup: showPopup,\n      handleClosePopup: handleClosePopup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nImageCardList.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.shape({\n    imageId: PropTypes.string,\n    imageCard: PropTypes.string\n  })\n};\nImageCardList.defaultProps = {\n  className: '',\n  data: []\n};\n\nconst reduxState = state => ({\n  notes: state.notes,\n  moreImage: state.moreImage\n});\n\nconst reduxDispatch = dispatch => ({\n  getNotes: data => dispatch(getDataFromAPI(data)),\n  showDetailProductImages: data => dispatch(getDetailProductImages(data))\n});\n\nexport default connect(reduxState, reduxDispatch)(ImageCardList);","map":{"version":3,"sources":["/Users/aleph/Documents/interindo-tooling/src/components/design-system/ImageCardList/index.js"],"names":["React","Component","Fragment","PropTypes","classname","FadeIn","LazyLoad","ImageCard","ImageModal","Button","getDataFromAPI","getDetailProductImages","connect","productImg1","productImg2","ImageCardList","state","showPopup","handleShowPopup","status","setState","handleClosePopup","componentDidMount","user","props","getNotes","render","className","data","notes","moreImage","classNames","length","map","bebas","id","cursor","backgroundColor","width","getDetail","propTypes","string","shape","imageId","imageCard","defaultProps","reduxState","reduxDispatch","dispatch","showDetailProductImages"],"mappings":"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","sourcesContent":["\nimport React, { Component,Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classname from 'classnames';\nimport FadeIn from 'react-fade-in';\nimport './styles.scss';\nimport LazyLoad from 'react-lazyload';\nimport { ImageCard, ImageModal } from '../../../components';\nimport { Button } from 'semantic-ui-react';\nimport {\n  getDataFromAPI,\n  getDetailProductImages\n} from \"../../../config/redux/action\";\nimport { connect } from \"react-redux\";\n\n\n// data dummy\nimport productImg1 from '../../../assets/images/dummy/product-card-1.jpeg';\nimport productImg2 from '../../../assets/images/dummy/product-card-2.jpeg';\n\nclass ImageCardList extends Component {\n\n  componentDidMount() {\n    const user = \"user\";\n    this.props.getNotes(user);\n  }\n\n  state = {\n    showPopup: false\n  }\n\n  handleShowPopup = (status) => {\n    this.setState({\n      showPopup: !status\n    });\n  };\n\n  handleClosePopup = (status) => {\n    this.setState({\n      showPopup: !status\n    });\n  };\n\n  render() {\n    const {\n      handleShowPopup,\n      handleClosePopup,\n      state: {\n        showPopup\n      },\n      props: {\n        className,\n        data,\n        notes,\n        moreImage\n      }\n    } = this;\n    const classNames = classname('ds-image-card-list', className);\n\n    return (\n      <FadeIn>\n        <div className=\"categoryMenu\">\n          {notes.length !== 0 ? (\n            <Fragment>\n              {notes.map(bebas => {\n                return (\n                  <div className=\"gridContainer\" key={bebas.id}>\n                    <div>\n                      <p\n                        style={{\n                          cursor: \"pointer\",\n                          backgroundColor: \"cyan\",\n                          width: \"-webkit-max-content\" /* Chrome */\n                        }}\n                        onClick={() => {\n                          this.getDetail(bebas);\n                        }}\n                      >\n                        {bebas.id}\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </Fragment>\n          ) : (\n              <p>Tidak ada Dataaa</p>\n            )}\n        </div>\n\n        {/* Pop Up Image */}\n        <ImageModal\n          showPopup={showPopup}\n          handleClosePopup={handleClosePopup}\n        />\n      </FadeIn>\n    );\n  }\n}\n\nImageCardList.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.shape({\n    imageId: PropTypes.string,\n    imageCard: PropTypes.string,\n  })\n}\n\nImageCardList.defaultProps = {\n  className: '',\n  data: [],\n}\n\nconst reduxState = state => ({\n  notes: state.notes,\n  moreImage: state.moreImage\n});\n\nconst reduxDispatch = dispatch => ({\n  getNotes: data => dispatch(getDataFromAPI(data)),\n  showDetailProductImages: data => dispatch(getDetailProductImages(data))\n});\n\nexport default connect(reduxState, reduxDispatch)(ImageCardList);\n"]},"metadata":{},"sourceType":"module"}