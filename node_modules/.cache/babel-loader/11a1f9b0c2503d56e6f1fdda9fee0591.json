{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.patternLikeCommon = exports.functionDeclarationCommon = exports.functionTypeAnnotationCommon = exports.functionCommon = void 0;\n\nvar _isValidIdentifier = _interopRequireDefault(require(\"../validators/isValidIdentifier\"));\n\nvar _constants = require(\"../constants\");\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n(0, _utils.default)(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)(\"null\", \"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    left: {\n      validate: (0, _utils.assertNodeType)(\"LVal\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS)\n    },\n    left: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"]\n});\n(0, _utils.default)(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\n(0, _utils.default)(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"DirectiveLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\n(0, _utils.default)(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\n});\n(0, _utils.default)(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n(0, _utils.default)(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"V8IntrinsicIdentifier\")\n    },\n    arguments: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\", \"JSXNamespacedName\", \"ArgumentPlaceholder\")))\n    },\n    optional: {\n      validate: (0, _utils.assertOneOf)(true, false),\n      optional: true\n    },\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\"]\n});\n(0, _utils.default)(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    alternate: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\", \"Conditional\"]\n});\n(0, _utils.default)(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n(0, _utils.default)(\"DebuggerStatement\", {\n  aliases: [\"Statement\"]\n});\n(0, _utils.default)(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\n});\n(0, _utils.default)(\"EmptyStatement\", {\n  aliases: [\"Statement\"]\n});\n(0, _utils.default)(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\n});\n(0, _utils.default)(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    }\n  }\n});\n(0, _utils.default)(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _utils.default)(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"Expression\"),\n      optional: true\n    },\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    update: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\nconst functionCommon = {\n  params: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Identifier\", \"Pattern\", \"RestElement\", \"TSParameterProperty\")))\n  },\n  generator: {\n    default: false,\n    validate: (0, _utils.assertValueType)(\"boolean\")\n  },\n  async: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    default: false\n  }\n};\nexports.functionCommon = functionCommon;\nconst functionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\nexports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;\nconst functionDeclarationCommon = Object.assign({}, functionCommon, {\n  declare: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  id: {\n    validate: (0, _utils.assertNodeType)(\"Identifier\"),\n    optional: true\n  }\n});\nexports.functionDeclarationCommon = functionDeclarationCommon;\n(0, _utils.default)(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: Object.assign({}, functionDeclarationCommon, {}, functionTypeAnnotationCommon, {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }),\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"]\n});\n(0, _utils.default)(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, functionCommon, {}, functionTypeAnnotationCommon, {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\nconst patternLikeCommon = {\n  typeAnnotation: {\n    validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\n  }\n};\nexports.patternLikeCommon = patternLikeCommon;\n(0, _utils.default)(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\"],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: Object.assign({}, patternLikeCommon, {\n    name: {\n      validate: (0, _utils.chain)(function (node, key, val) {\n        if (!(0, _isValidIdentifier.default)(val)) {}\n      }, (0, _utils.assertValueType)(\"string\"))\n    },\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    },\n    alternate: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _utils.default)(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _utils.default)(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"number\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    flags: {\n      validate: (0, _utils.assertValueType)(\"string\"),\n      default: \"\"\n    }\n  }\n});\n(0, _utils.default)(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"MemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"PrivateName\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }()\n    },\n    computed: {\n      default: false\n    },\n    optional: {\n      validate: (0, _utils.assertOneOf)(true, false),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"NewExpression\", {\n  inherits: \"CallExpression\"\n});\n(0, _utils.default)(\"Program\", {\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceFile: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    sourceType: {\n      validate: (0, _utils.assertOneOf)(\"script\", \"module\"),\n      default: \"script\"\n    },\n    interpreter: {\n      validate: (0, _utils.assertNodeType)(\"InterpreterDirective\"),\n      default: null,\n      optional: true\n    },\n    directives: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"]\n});\n(0, _utils.default)(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _utils.default)(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\"],\n  fields: Object.assign({}, functionCommon, {}, functionTypeAnnotationCommon, {\n    kind: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")),\n      default: \"method\"\n    },\n    computed: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }()\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }),\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\n});\n(0, _utils.default)(\"ObjectProperty\", {\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", \"decorators\"],\n  fields: {\n    computed: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }()\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"PatternLike\")\n    },\n    shorthand: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"]\n});\n(0, _utils.default)(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: Object.assign({}, patternLikeCommon, {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"LVal\")\n    }\n  })\n});\n(0, _utils.default)(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    consequent: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\n    }\n  }\n});\n(0, _utils.default)(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    cases: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"SwitchCase\")))\n    }\n  }\n});\n(0, _utils.default)(\"ThisExpression\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    handler: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"CatchClause\")\n    },\n    finalizer: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n(0, _utils.default)(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true\n    },\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"]\n});\n(0, _utils.default)(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false\n    },\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    kind: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"var\", \"let\", \"const\"))\n    },\n    declarations: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"VariableDeclarator\")))\n    }\n  }\n});\n(0, _utils.default)(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"LVal\")\n    },\n    definite: {\n      optional: true,\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    init: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});\n(0, _utils.default)(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});","map":{"version":3,"sources":["C:/File Ch/test1 updates/interindo-tooling/node_modules/@babel/types/lib/definitions/core.js"],"names":["Object","defineProperty","exports","value","patternLikeCommon","functionDeclarationCommon","functionTypeAnnotationCommon","functionCommon","_isValidIdentifier","_interopRequireDefault","require","_constants","_utils","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","fields","elements","validate","chain","assertValueType","assertEach","assertNodeOrValueType","visitor","aliases","operator","left","assertNodeType","right","builder","assertOneOf","BINARY_OPERATORS","directives","body","label","optional","callee","arguments","typeArguments","typeParameters","param","test","consequent","alternate","expression","program","init","update","params","generator","async","returnType","assign","declare","id","inherits","typeAnnotation","decorators","name","node","val","deprecatedAlias","pattern","flags","LOGICAL_OPERATORS","object","property","normal","computed","validator","sourceFile","sourceType","interpreter","properties","kind","shorthand","argument","expressions","discriminant","cases","block","handler","finalizer","prefix","UNARY_OPERATORS","UPDATE_OPERATORS","declarations","definite"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.patternLikeCommon = exports.functionDeclarationCommon = exports.functionTypeAnnotationCommon = exports.functionCommon = void 0;\r\n\r\nvar _isValidIdentifier = _interopRequireDefault(require(\"../validators/isValidIdentifier\"));\r\n\r\nvar _constants = require(\"../constants\");\r\n\r\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\r\n\r\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n(0, _utils.default)(\"ArrayExpression\", {\r\n  fields: {\r\n    elements: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)(\"null\", \"Expression\", \"SpreadElement\"))),\r\n      default: []\r\n    }\r\n  },\r\n  visitor: [\"elements\"],\r\n  aliases: [\"Expression\"]\r\n});\r\n(0, _utils.default)(\"AssignmentExpression\", {\r\n  fields: {\r\n    operator: {\r\n      validate: (0, _utils.assertValueType)(\"string\")\r\n    },\r\n    left: {\r\n      validate: (0, _utils.assertNodeType)(\"LVal\")\r\n    },\r\n    right: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  },\r\n  builder: [\"operator\", \"left\", \"right\"],\r\n  visitor: [\"left\", \"right\"],\r\n  aliases: [\"Expression\"]\r\n});\r\n(0, _utils.default)(\"BinaryExpression\", {\r\n  builder: [\"operator\", \"left\", \"right\"],\r\n  fields: {\r\n    operator: {\r\n      validate: (0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS)\r\n    },\r\n    left: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    right: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  },\r\n  visitor: [\"left\", \"right\"],\r\n  aliases: [\"Binary\", \"Expression\"]\r\n});\r\n(0, _utils.default)(\"InterpreterDirective\", {\r\n  builder: [\"value\"],\r\n  fields: {\r\n    value: {\r\n      validate: (0, _utils.assertValueType)(\"string\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"Directive\", {\r\n  visitor: [\"value\"],\r\n  fields: {\r\n    value: {\r\n      validate: (0, _utils.assertNodeType)(\"DirectiveLiteral\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"DirectiveLiteral\", {\r\n  builder: [\"value\"],\r\n  fields: {\r\n    value: {\r\n      validate: (0, _utils.assertValueType)(\"string\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"BlockStatement\", {\r\n  builder: [\"body\", \"directives\"],\r\n  visitor: [\"directives\", \"body\"],\r\n  fields: {\r\n    directives: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Directive\"))),\r\n      default: []\r\n    },\r\n    body: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\r\n    }\r\n  },\r\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\r\n});\r\n(0, _utils.default)(\"BreakStatement\", {\r\n  visitor: [\"label\"],\r\n  fields: {\r\n    label: {\r\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\r\n      optional: true\r\n    }\r\n  },\r\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\r\n});\r\n(0, _utils.default)(\"CallExpression\", {\r\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\r\n  builder: [\"callee\", \"arguments\"],\r\n  aliases: [\"Expression\"],\r\n  fields: {\r\n    callee: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"V8IntrinsicIdentifier\")\r\n    },\r\n    arguments: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\", \"JSXNamespacedName\", \"ArgumentPlaceholder\")))\r\n    },\r\n    optional: {\r\n      validate: (0, _utils.assertOneOf)(true, false),\r\n      optional: true\r\n    },\r\n    typeArguments: {\r\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\"),\r\n      optional: true\r\n    },\r\n    typeParameters: {\r\n      validate: (0, _utils.assertNodeType)(\"TSTypeParameterInstantiation\"),\r\n      optional: true\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"CatchClause\", {\r\n  visitor: [\"param\", \"body\"],\r\n  fields: {\r\n    param: {\r\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\r\n      optional: true\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\r\n    }\r\n  },\r\n  aliases: [\"Scopable\", \"BlockParent\"]\r\n});\r\n(0, _utils.default)(\"ConditionalExpression\", {\r\n  visitor: [\"test\", \"consequent\", \"alternate\"],\r\n  fields: {\r\n    test: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    consequent: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    alternate: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  },\r\n  aliases: [\"Expression\", \"Conditional\"]\r\n});\r\n(0, _utils.default)(\"ContinueStatement\", {\r\n  visitor: [\"label\"],\r\n  fields: {\r\n    label: {\r\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\r\n      optional: true\r\n    }\r\n  },\r\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\r\n});\r\n(0, _utils.default)(\"DebuggerStatement\", {\r\n  aliases: [\"Statement\"]\r\n});\r\n(0, _utils.default)(\"DoWhileStatement\", {\r\n  visitor: [\"test\", \"body\"],\r\n  fields: {\r\n    test: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"Statement\")\r\n    }\r\n  },\r\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\r\n});\r\n(0, _utils.default)(\"EmptyStatement\", {\r\n  aliases: [\"Statement\"]\r\n});\r\n(0, _utils.default)(\"ExpressionStatement\", {\r\n  visitor: [\"expression\"],\r\n  fields: {\r\n    expression: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  },\r\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\r\n});\r\n(0, _utils.default)(\"File\", {\r\n  builder: [\"program\", \"comments\", \"tokens\"],\r\n  visitor: [\"program\"],\r\n  fields: {\r\n    program: {\r\n      validate: (0, _utils.assertNodeType)(\"Program\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"ForInStatement\", {\r\n  visitor: [\"left\", \"right\", \"body\"],\r\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\r\n  fields: {\r\n    left: {\r\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"LVal\")\r\n    },\r\n    right: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"Statement\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"ForStatement\", {\r\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\r\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\r\n  fields: {\r\n    init: {\r\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"Expression\"),\r\n      optional: true\r\n    },\r\n    test: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\r\n      optional: true\r\n    },\r\n    update: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\r\n      optional: true\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"Statement\")\r\n    }\r\n  }\r\n});\r\nconst functionCommon = {\r\n  params: {\r\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Identifier\", \"Pattern\", \"RestElement\", \"TSParameterProperty\")))\r\n  },\r\n  generator: {\r\n    default: false,\r\n    validate: (0, _utils.assertValueType)(\"boolean\")\r\n  },\r\n  async: {\r\n    validate: (0, _utils.assertValueType)(\"boolean\"),\r\n    default: false\r\n  }\r\n};\r\nexports.functionCommon = functionCommon;\r\nconst functionTypeAnnotationCommon = {\r\n  returnType: {\r\n    validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\r\n    optional: true\r\n  },\r\n  typeParameters: {\r\n    validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\r\n    optional: true\r\n  }\r\n};\r\nexports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;\r\nconst functionDeclarationCommon = Object.assign({}, functionCommon, {\r\n  declare: {\r\n    validate: (0, _utils.assertValueType)(\"boolean\"),\r\n    optional: true\r\n  },\r\n  id: {\r\n    validate: (0, _utils.assertNodeType)(\"Identifier\"),\r\n    optional: true\r\n  }\r\n});\r\nexports.functionDeclarationCommon = functionDeclarationCommon;\r\n(0, _utils.default)(\"FunctionDeclaration\", {\r\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\r\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\r\n  fields: Object.assign({}, functionDeclarationCommon, {}, functionTypeAnnotationCommon, {\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\r\n    }\r\n  }),\r\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"]\r\n});\r\n(0, _utils.default)(\"FunctionExpression\", {\r\n  inherits: \"FunctionDeclaration\",\r\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\r\n  fields: Object.assign({}, functionCommon, {}, functionTypeAnnotationCommon, {\r\n    id: {\r\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\r\n      optional: true\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\r\n    }\r\n  })\r\n});\r\nconst patternLikeCommon = {\r\n  typeAnnotation: {\r\n    validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\r\n    optional: true\r\n  },\r\n  decorators: {\r\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\r\n  }\r\n};\r\nexports.patternLikeCommon = patternLikeCommon;\r\n(0, _utils.default)(\"Identifier\", {\r\n  builder: [\"name\"],\r\n  visitor: [\"typeAnnotation\", \"decorators\"],\r\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\r\n  fields: Object.assign({}, patternLikeCommon, {\r\n    name: {\r\n      validate: (0, _utils.chain)(function (node, key, val) {\r\n        if (!(0, _isValidIdentifier.default)(val)) {}\r\n      }, (0, _utils.assertValueType)(\"string\"))\r\n    },\r\n    optional: {\r\n      validate: (0, _utils.assertValueType)(\"boolean\"),\r\n      optional: true\r\n    }\r\n  })\r\n});\r\n(0, _utils.default)(\"IfStatement\", {\r\n  visitor: [\"test\", \"consequent\", \"alternate\"],\r\n  aliases: [\"Statement\", \"Conditional\"],\r\n  fields: {\r\n    test: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    consequent: {\r\n      validate: (0, _utils.assertNodeType)(\"Statement\")\r\n    },\r\n    alternate: {\r\n      optional: true,\r\n      validate: (0, _utils.assertNodeType)(\"Statement\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"LabeledStatement\", {\r\n  visitor: [\"label\", \"body\"],\r\n  aliases: [\"Statement\"],\r\n  fields: {\r\n    label: {\r\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"Statement\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"StringLiteral\", {\r\n  builder: [\"value\"],\r\n  fields: {\r\n    value: {\r\n      validate: (0, _utils.assertValueType)(\"string\")\r\n    }\r\n  },\r\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\r\n});\r\n(0, _utils.default)(\"NumericLiteral\", {\r\n  builder: [\"value\"],\r\n  deprecatedAlias: \"NumberLiteral\",\r\n  fields: {\r\n    value: {\r\n      validate: (0, _utils.assertValueType)(\"number\")\r\n    }\r\n  },\r\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\r\n});\r\n(0, _utils.default)(\"NullLiteral\", {\r\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\r\n});\r\n(0, _utils.default)(\"BooleanLiteral\", {\r\n  builder: [\"value\"],\r\n  fields: {\r\n    value: {\r\n      validate: (0, _utils.assertValueType)(\"boolean\")\r\n    }\r\n  },\r\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\r\n});\r\n(0, _utils.default)(\"RegExpLiteral\", {\r\n  builder: [\"pattern\", \"flags\"],\r\n  deprecatedAlias: \"RegexLiteral\",\r\n  aliases: [\"Expression\", \"Literal\"],\r\n  fields: {\r\n    pattern: {\r\n      validate: (0, _utils.assertValueType)(\"string\")\r\n    },\r\n    flags: {\r\n      validate: (0, _utils.assertValueType)(\"string\"),\r\n      default: \"\"\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"LogicalExpression\", {\r\n  builder: [\"operator\", \"left\", \"right\"],\r\n  visitor: [\"left\", \"right\"],\r\n  aliases: [\"Binary\", \"Expression\"],\r\n  fields: {\r\n    operator: {\r\n      validate: (0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS)\r\n    },\r\n    left: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    right: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"MemberExpression\", {\r\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\r\n  visitor: [\"object\", \"property\"],\r\n  aliases: [\"Expression\", \"LVal\"],\r\n  fields: {\r\n    object: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    property: {\r\n      validate: function () {\r\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"PrivateName\");\r\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\r\n        return function (node, key, val) {\r\n          const validator = node.computed ? computed : normal;\r\n          validator(node, key, val);\r\n        };\r\n      }()\r\n    },\r\n    computed: {\r\n      default: false\r\n    },\r\n    optional: {\r\n      validate: (0, _utils.assertOneOf)(true, false),\r\n      optional: true\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"NewExpression\", {\r\n  inherits: \"CallExpression\"\r\n});\r\n(0, _utils.default)(\"Program\", {\r\n  visitor: [\"directives\", \"body\"],\r\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\r\n  fields: {\r\n    sourceFile: {\r\n      validate: (0, _utils.assertValueType)(\"string\")\r\n    },\r\n    sourceType: {\r\n      validate: (0, _utils.assertOneOf)(\"script\", \"module\"),\r\n      default: \"script\"\r\n    },\r\n    interpreter: {\r\n      validate: (0, _utils.assertNodeType)(\"InterpreterDirective\"),\r\n      default: null,\r\n      optional: true\r\n    },\r\n    directives: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Directive\"))),\r\n      default: []\r\n    },\r\n    body: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\r\n    }\r\n  },\r\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"]\r\n});\r\n(0, _utils.default)(\"ObjectExpression\", {\r\n  visitor: [\"properties\"],\r\n  aliases: [\"Expression\"],\r\n  fields: {\r\n    properties: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\")))\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"ObjectMethod\", {\r\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\"],\r\n  fields: Object.assign({}, functionCommon, {}, functionTypeAnnotationCommon, {\r\n    kind: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")),\r\n      default: \"method\"\r\n    },\r\n    computed: {\r\n      validate: (0, _utils.assertValueType)(\"boolean\"),\r\n      default: false\r\n    },\r\n    key: {\r\n      validate: function () {\r\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\");\r\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\r\n        return function (node, key, val) {\r\n          const validator = node.computed ? computed : normal;\r\n          validator(node, key, val);\r\n        };\r\n      }()\r\n    },\r\n    decorators: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\")))\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\r\n    }\r\n  }),\r\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\r\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\r\n});\r\n(0, _utils.default)(\"ObjectProperty\", {\r\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", \"decorators\"],\r\n  fields: {\r\n    computed: {\r\n      validate: (0, _utils.assertValueType)(\"boolean\"),\r\n      default: false\r\n    },\r\n    key: {\r\n      validate: function () {\r\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\");\r\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\r\n        return function (node, key, val) {\r\n          const validator = node.computed ? computed : normal;\r\n          validator(node, key, val);\r\n        };\r\n      }()\r\n    },\r\n    value: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"PatternLike\")\r\n    },\r\n    shorthand: {\r\n      validate: (0, _utils.assertValueType)(\"boolean\"),\r\n      default: false\r\n    },\r\n    decorators: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\r\n      optional: true\r\n    }\r\n  },\r\n  visitor: [\"key\", \"value\", \"decorators\"],\r\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"]\r\n});\r\n(0, _utils.default)(\"RestElement\", {\r\n  visitor: [\"argument\", \"typeAnnotation\"],\r\n  builder: [\"argument\"],\r\n  aliases: [\"LVal\", \"PatternLike\"],\r\n  deprecatedAlias: \"RestProperty\",\r\n  fields: Object.assign({}, patternLikeCommon, {\r\n    argument: {\r\n      validate: (0, _utils.assertNodeType)(\"LVal\")\r\n    }\r\n  })\r\n});\r\n(0, _utils.default)(\"ReturnStatement\", {\r\n  visitor: [\"argument\"],\r\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\r\n  fields: {\r\n    argument: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\r\n      optional: true\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"SequenceExpression\", {\r\n  visitor: [\"expressions\"],\r\n  fields: {\r\n    expressions: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\")))\r\n    }\r\n  },\r\n  aliases: [\"Expression\"]\r\n});\r\n(0, _utils.default)(\"ParenthesizedExpression\", {\r\n  visitor: [\"expression\"],\r\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\r\n  fields: {\r\n    expression: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"SwitchCase\", {\r\n  visitor: [\"test\", \"consequent\"],\r\n  fields: {\r\n    test: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\r\n      optional: true\r\n    },\r\n    consequent: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"SwitchStatement\", {\r\n  visitor: [\"discriminant\", \"cases\"],\r\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\r\n  fields: {\r\n    discriminant: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    cases: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"SwitchCase\")))\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"ThisExpression\", {\r\n  aliases: [\"Expression\"]\r\n});\r\n(0, _utils.default)(\"ThrowStatement\", {\r\n  visitor: [\"argument\"],\r\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\r\n  fields: {\r\n    argument: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"TryStatement\", {\r\n  visitor: [\"block\", \"handler\", \"finalizer\"],\r\n  aliases: [\"Statement\"],\r\n  fields: {\r\n    block: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\r\n    },\r\n    handler: {\r\n      optional: true,\r\n      validate: (0, _utils.assertNodeType)(\"CatchClause\")\r\n    },\r\n    finalizer: {\r\n      optional: true,\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"UnaryExpression\", {\r\n  builder: [\"operator\", \"argument\", \"prefix\"],\r\n  fields: {\r\n    prefix: {\r\n      default: true\r\n    },\r\n    argument: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    operator: {\r\n      validate: (0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS)\r\n    }\r\n  },\r\n  visitor: [\"argument\"],\r\n  aliases: [\"UnaryLike\", \"Expression\"]\r\n});\r\n(0, _utils.default)(\"UpdateExpression\", {\r\n  builder: [\"operator\", \"argument\", \"prefix\"],\r\n  fields: {\r\n    prefix: {\r\n      default: false\r\n    },\r\n    argument: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    operator: {\r\n      validate: (0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS)\r\n    }\r\n  },\r\n  visitor: [\"argument\"],\r\n  aliases: [\"Expression\"]\r\n});\r\n(0, _utils.default)(\"VariableDeclaration\", {\r\n  builder: [\"kind\", \"declarations\"],\r\n  visitor: [\"declarations\"],\r\n  aliases: [\"Statement\", \"Declaration\"],\r\n  fields: {\r\n    declare: {\r\n      validate: (0, _utils.assertValueType)(\"boolean\"),\r\n      optional: true\r\n    },\r\n    kind: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"var\", \"let\", \"const\"))\r\n    },\r\n    declarations: {\r\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"VariableDeclarator\")))\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"VariableDeclarator\", {\r\n  visitor: [\"id\", \"init\"],\r\n  fields: {\r\n    id: {\r\n      validate: (0, _utils.assertNodeType)(\"LVal\")\r\n    },\r\n    definite: {\r\n      optional: true,\r\n      validate: (0, _utils.assertValueType)(\"boolean\")\r\n    },\r\n    init: {\r\n      optional: true,\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"WhileStatement\", {\r\n  visitor: [\"test\", \"body\"],\r\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\r\n  fields: {\r\n    test: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Statement\")\r\n    }\r\n  }\r\n});\r\n(0, _utils.default)(\"WithStatement\", {\r\n  visitor: [\"object\", \"body\"],\r\n  aliases: [\"Statement\"],\r\n  fields: {\r\n    object: {\r\n      validate: (0, _utils.assertNodeType)(\"Expression\")\r\n    },\r\n    body: {\r\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Statement\")\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"script"}