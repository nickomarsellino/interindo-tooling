{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cloneNode;\n\nvar _definitions = require(\"../definitions\");\n\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\n\nfunction cloneIfNode(obj, deep) {\n  if (obj && typeof obj.type === \"string\" && obj.type !== \"CommentLine\" && obj.type !== \"CommentBlock\") {\n    return cloneNode(obj, deep);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(obj, deep) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep));\n  }\n\n  return cloneIfNode(obj, deep);\n}\n\nfunction cloneNode(node, deep = true) {\n  if (!node) return node;\n  const type = node.type;\n  const newNode = {\n    type\n  };\n\n  if (type === \"Identifier\") {\n    newNode.name = node.name;\n\n    if (has(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (has(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true) : node.typeAnnotation;\n    }\n  } else if (!has(_definitions.NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {\n      if (has(node, field)) {\n        newNode[field] = deep ? cloneIfNodeOrArray(node[field], true) : node[field];\n      }\n    }\n  }\n\n  if (has(node, \"loc\")) {\n    newNode.loc = node.loc;\n  }\n\n  if (has(node, \"leadingComments\")) {\n    newNode.leadingComments = node.leadingComments;\n  }\n\n  if (has(node, \"innerComments\")) {\n    newNode.innerComments = node.innerComments;\n  }\n\n  if (has(node, \"trailingComments\")) {\n    newNode.trailingComments = node.trailingComments;\n  }\n\n  if (has(node, \"extra\")) {\n    newNode.extra = Object.assign({}, node.extra);\n  }\n\n  return newNode;\n}","map":{"version":3,"sources":["C:/File Ch/test1 updates/interindo-tooling/node_modules/@babel/types/lib/clone/cloneNode.js"],"names":["Object","defineProperty","exports","value","default","cloneNode","_definitions","require","has","Function","call","bind","prototype","hasOwnProperty","cloneIfNode","obj","deep","type","cloneIfNodeOrArray","Array","isArray","map","node","newNode","name","optional","typeAnnotation","NODE_FIELDS","Error","field","keys","loc","leadingComments","innerComments","trailingComments","extra","assign"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = cloneNode;\r\n\r\nvar _definitions = require(\"../definitions\");\r\n\r\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\r\n\r\nfunction cloneIfNode(obj, deep) {\r\n  if (obj && typeof obj.type === \"string\" && obj.type !== \"CommentLine\" && obj.type !== \"CommentBlock\") {\r\n    return cloneNode(obj, deep);\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction cloneIfNodeOrArray(obj, deep) {\r\n  if (Array.isArray(obj)) {\r\n    return obj.map(node => cloneIfNode(node, deep));\r\n  }\r\n\r\n  return cloneIfNode(obj, deep);\r\n}\r\n\r\nfunction cloneNode(node, deep = true) {\r\n  if (!node) return node;\r\n  const {\r\n    type\r\n  } = node;\r\n  const newNode = {\r\n    type\r\n  };\r\n\r\n  if (type === \"Identifier\") {\r\n    newNode.name = node.name;\r\n\r\n    if (has(node, \"optional\") && typeof node.optional === \"boolean\") {\r\n      newNode.optional = node.optional;\r\n    }\r\n\r\n    if (has(node, \"typeAnnotation\")) {\r\n      newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true) : node.typeAnnotation;\r\n    }\r\n  } else if (!has(_definitions.NODE_FIELDS, type)) {\r\n    throw new Error(`Unknown node type: \"${type}\"`);\r\n  } else {\r\n    for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {\r\n      if (has(node, field)) {\r\n        newNode[field] = deep ? cloneIfNodeOrArray(node[field], true) : node[field];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (has(node, \"loc\")) {\r\n    newNode.loc = node.loc;\r\n  }\r\n\r\n  if (has(node, \"leadingComments\")) {\r\n    newNode.leadingComments = node.leadingComments;\r\n  }\r\n\r\n  if (has(node, \"innerComments\")) {\r\n    newNode.innerComments = node.innerComments;\r\n  }\r\n\r\n  if (has(node, \"trailingComments\")) {\r\n    newNode.trailingComments = node.trailingComments;\r\n  }\r\n\r\n  if (has(node, \"extra\")) {\r\n    newNode.extra = Object.assign({}, node.extra);\r\n  }\r\n\r\n  return newNode;\r\n}"]},"metadata":{},"sourceType":"script"}